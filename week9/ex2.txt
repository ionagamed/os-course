UPD: We must leave the same sequence, adding a new subheading to show the results

# Initial results

**10 frames**:
    hit: 11 (1.100000%), miss: 989 (98.900002%), hit/miss: 0.011122

**50 frames**:
    hit: 51 (5.100000%), miss: 949 (94.900002%), hit/miss: 0.053741

**1000 frames**:
    hit: 375 (37.500000%), miss: 625 (62.500000%), hit/miss: 0.600000

1000 frames is basically sufficient for a perfect memory in here,
thus in the 'Application to test data..' section I will use only 10 and 50 frames.

# Hit ratio

Ideal hit ratio would be if only one page will be referenced

e.g.

10  # page frames

1
1
1
...
1  # page references only '1'


For N page references this would result in N - 1 hits and only 1 miss.

### Minimizing the misses
There could not be less than 1 miss in any input (except for zero), 
thus 1 miss is the minimal amount

### Maximising the hits
N - 1 could grow arbitrarily large depending on the amount of references.

### Application to test data from previous exercise
Existing sequence could be sorted to resemble the structure, 
yielding next results:

**10 frames**:
    hit: 375 (37.500000%), miss: 625 (62.500000%), hit/miss: 0.600000

**50 frames**:
    hit: 375 (37.500000%), miss: 625 (62.500000%), hit/miss: 0.600000

They are exactly equal as the source file contains at most 4 different numbers.
For 10 and 50 frames, the ratio is actually increased, in comparison to original 
'10 and 50 frames' results.
    

# Miss ratio

Big miss ratio would be achieved if all page references would be unique

e.g.

10  # page frames

1
2
3
...
999
1000
...
N

### Maximizing the misses
There are already N out of N misses, so that could not be maximized further.

### Minimizing the hits
There are already 0 hits, so that could not be minimized further.

### Reality
In reality, of course there would not be enough pages to count to infinity.
It is sufficent then to evenly space out at least K + 1 pages so that every
time a page is needed, it is already too old

e.g.

10  # page frames

1
...
10
11
1
2
...
10
... and so on

This would still give the desired result of 0 hits.

### Application to test data from previous exercise

We could space out equal page references so that
any equal numbers in the source file would have at least K - 1 numbers between them
(where K is the amount of frames).

But that would take too much time, so ...

We could randomly shuffle to maximize miss rate :)
This yields next results:

**10 frames**:
    hit: 8 (0.800000%), miss: 992 (99.199997%), hit/miss: 0.008065

**50 frames**:
    hit: 51 (5.100000%), miss: 949 (94.900002%), hit/miss: 0.053741


As we can see, we have been able to increase the miss rate for at least '10 frames' result